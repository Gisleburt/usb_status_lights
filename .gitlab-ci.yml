#########
# Reuse #
#########
variables:
  RUNNER_IMAGE: docker:20
  ARTIFACT_IMAGE: registry.gitlab.com/gisleburt-homelab/usb-status-lights
  RUST_RUNNER: registry.gitlab.com/gisleburt-homelab/rust-builder:1.61.0.0

.tags: &tags
  tags:
  - linux
  - arm64
  - gisleburt
  - homelab

##########
# Stages #
##########
stages:
  - test
  - build

unit-test-job:
  <<: *tags
  stage: test
  image: $RUST_RUNNER
  script:
    - (cd status_lights_cli && cargo test)
    - (cd status_lights_messages && cargo test)
    - (cd status_lights_neo_trinkey && cargo test)

lint-test-job: # This job also runs in the test stage.
  <<: *tags
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  image: $RUST_RUNNER
  script:
    - (cd status_lights_cli && cargo clippy)
    - (cd status_lights_messages && cargo clippy)
    - (cd status_lights_neo_trinkey && cargo clippy)


#########
# Build #
#########
.docker-build: &docker-build
  stage: build
  image: docker:20-dind
  variables:
    DOCKER_HOST: tcp://localhost:2376
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_TLS_VERIFY: 1
  services:
    - name: docker:dind
      command: [ "--mtu=1300" ]
  before_script:
    - wget google.com # test dns is working
    - while [ ! -f /certs/client/ca.pem ]; do sleep 1; done
    - ls -R /certs
    - while ! docker info; do sleep 1; done
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

build-linux-arm64:
  <<: *docker-build
  <<: *tags
  stage: build
  script:
    - docker build . -t $ARTIFACT_IMAGE
    - docker push $ARTIFACT_IMAGE
    - RUST_VERSION=$(docker run --rm $ARTIFACT_IMAGE sh -c "rustc --version | awk '{ print \$2 }'")
    - docker tag $ARTIFACT_IMAGE $ARTIFACT_IMAGE:$RUST_VERSION
    - docker push $ARTIFACT_IMAGE:$RUST_VERSION
